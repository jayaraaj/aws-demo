<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module 5: End to End Execution   on AWS DevSecOps Modernization Workshop</title>
    <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance.html</link>
    <description>Recent content in Module 5: End to End Execution   on AWS DevSecOps Modernization Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Aug 2019 19:21:12 -0700</lastBuildDate>
    
	<atom:link href="https://aws-hugo.web.app/48_end_to_end_testing_assurance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/1_introduction.html</link>
      <pubDate>Sun, 11 Aug 2019 19:21:12 -0700</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/1_introduction.html</guid>
      <description>Objective: To execute the continuous testing pipeline with all the pre-defined quality gates In prior modules, you have seen how tests are required to verify all facets of the application viz. – functional, performance, security, accessibility etc. You have also seen the need for quality assurance for not just the UI, but also at a component level viz. – code, build, deployment, data &amp;amp; interfacing services. You have seen a few examples of application defects and test incidents that can occur during a test pipeline execution and understood how to fix them.</description>
    </item>
    
    <item>
      <title>Build &amp; Execute</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/2_build_execute.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/2_build_execute.html</guid>
      <description>PIPELINE CREATION AND EXECUTION To deploy the pipeline, run the following commands in Cloud9’s terminal
aws cloudformation create-stack --stack-name E2EAssurance --template-url https://aws-wrkshp-artifacts.s3-eu-west-1.amazonaws.com/awsworkshop_infrastructure_artefacts/awsworkshop_e2e_assurance.json --capabilities CAPABILITY_NAMED_IAM Go to the CloudFormation console and check the status of your pipeline stack creation named &amp;lsquo;E2EAssurance&amp;rsquo;. It should state - “CREATE_IN_PROGRESS”This step takes approximately 1 minute and if successful, you can see the status of STACK - ‘E2EAssurance’ as “CREATE_COMPLETE”as shown in the screenshot below:</description>
    </item>
    
    <item>
      <title>Report &amp; Analysis</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/3_test_reports_analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/3_test_reports_analysis.html</guid>
      <description>TEST REPORTS ANALYSIS Reporting dashboard showcases a consolidated view of the statistics applicable for all the types of tests performed as the part of E2E Assurance.
To access the dashboard, replace the value of key ‘AppServer_PublicIP‘ which you have noted in output section, of the Getting Started section in the below URL:
Dashboard URL is - http://&amp;lt;AppServer_PublicIP&amp;gt;:3337/report
Click on the relevant section of the dashboard to view the details of the individual modules covered:</description>
    </item>
    
    <item>
      <title>The Accelerator</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/4_ai_driven_qa.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/4_ai_driven_qa.html</guid>
      <description>AI Driven QA An artificial intelligence (AI) driven QA leverages machine learning (ML) and Natural language processing (NLP) algorithms and techniques to build meaningful insights into the product quality. The AI induces this much needed intelligence into the continuous testing pipelines by forecasting possible defects, impacts, gaps, failures and test coverage and help the DevOps teams take informed decisions on run time. No wonder thus that AI is rapidly proving to be the modern day accelerator for testing in DevOps that significantly optimizes the overall testing effort and cycle time.</description>
    </item>
    
    <item>
      <title>Tikk Talk</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/5_tikk_talk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/5_tikk_talk.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/30_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/30_summary.html</guid>
      <description>In this module, we have witnessed the end-to-end successful test execution for a happy path scenario. The idea is to demonstrate how the continuous pipelines will be executed in real time progressing the code through various quality gates and ensuring that the every aspect of a code change is tested and confirmed before it is certified for pre-production environments.
As discussed at the start, we have now seen how Testing in DevOps should be continuous in execution, collaborative by nature, cognitive with its decision-making and cloud ready in its architecture.</description>
    </item>
    
  </channel>
</rss>