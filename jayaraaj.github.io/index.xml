<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Automation in DevOps on AWS DevSecOps Modernization Workshop</title>
    <link>https://aws-hugo.web.app/</link>
    <description>Recent content in Test Automation in DevOps on AWS DevSecOps Modernization Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Aug 2019 19:21:12 -0700</lastBuildDate>
    
	<atom:link href="https://aws-hugo.web.app/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://aws-hugo.web.app/45_build_deploy_assurance/1_introduction.html</link>
      <pubDate>Sun, 11 Aug 2019 19:21:12 -0700</pubDate>
      
      <guid>https://aws-hugo.web.app/45_build_deploy_assurance/1_introduction.html</guid>
      <description>Objective: To check the readiness of the build for testing and preparing the environment for subsequent test executions In this stage, developers and testers focus on a set of tests adequate to ensure critical functionalities work as required in the build and these tests are also known as build verification testing, confidence testing (or) build acceptance testing. PIPELINE OVERVIEW In this module, you will explore the Post Build Quality Assurance stage of the overall testing pipeline for DevOps.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://aws-hugo.web.app/46_functional_assurance/1_introduction.html</link>
      <pubDate>Sun, 11 Aug 2019 19:21:12 -0700</pubDate>
      
      <guid>https://aws-hugo.web.app/46_functional_assurance/1_introduction.html</guid>
      <description>Objective: To validate application&amp;rsquo;s functional behavior such as business process, user workflows &amp;amp; regression impact against the pre-defined outcomes Functional behaviors are “what” the system should do. Functional testing evaluates if functions perform as expected. Functional requirements may be described and documented in business requirements specifications, epics, user stories, use cases, (or) functional specifications, or they may be undocumented.
These tests should be performed at all test levels, though the focus is different at each level.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://aws-hugo.web.app/47_experience_assurance/1_introduction.html</link>
      <pubDate>Sun, 11 Aug 2019 19:21:12 -0700</pubDate>
      
      <guid>https://aws-hugo.web.app/47_experience_assurance/1_introduction.html</guid>
      <description>Objective: To validate application’s non-functional behavior such as performance, accessibility &amp;amp; security meet acceptable / pre-defined benchmarks Non-functional behaviors are “How” the system should perform its functions. In today’s digital age, it’s not just about if an application works, but more importantly, how it works. Testing an application to validate its performance, security and accessibility is commonly known as Non-functional Testing (NFT).
Shift left with NFT, allows developers / testers to leverage scaled-down environments for non-functional testing at a component level as and when, they are developed.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/1_introduction.html</link>
      <pubDate>Sun, 11 Aug 2019 19:21:12 -0700</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/1_introduction.html</guid>
      <description>Objective: To execute the continuous testing pipeline with all the pre-defined quality gates In prior modules, you have seen how tests are required to verify all facets of the application viz. – functional, performance, security, accessibility etc. You have also seen the need for quality assurance for not just the UI, but also at a component level viz. – code, build, deployment, data &amp;amp; interfacing services. You have seen a few examples of application defects and test incidents that can occur during a test pipeline execution and understood how to fix them.</description>
    </item>
    
    <item>
      <title>Clean-up Activities</title>
      <link>https://aws-hugo.web.app/60_clean_up/1_cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/60_clean_up/1_cleanup.html</guid>
      <description>When you are ready, just follow these last two steps to clean up the resources that were setup just for this workshop.
In order to prevent charges to your account, we recommend cleaning up the infrastructure that was created. If you plan to keep things running, so you can examine the workshop a bit more, then please remember to do the clean-up when you are done. It is very easy to leave things running in an AWS account, forget about it, and then accrue charges.</description>
    </item>
    
    <item>
      <title>Create an AWS account</title>
      <link>https://aws-hugo.web.app/10_prerequisites/1_aws_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/10_prerequisites/1_aws_account.html</guid>
      <description>Your account must have the ability to create new IAM roles and scope other IAM permissions.
 If you already have an AWS account, and have IAM Administrator access, you can skip this page.
   If you do not already have an AWS account with Administrator access: create one now
  Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://aws-hugo.web.app/30_pre_build_quality_assurance/1_introduction.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/30_pre_build_quality_assurance/1_introduction.html</guid>
      <description>Objective: To assure quality of the code committed before the build creation In software development, build refers to the process of converting files and other assets under developer&amp;rsquo;s responsibility into a software product in its final (or) consumable form. These activities cover: Compile source files -&amp;gt; Package compiled files into compressed formats (like jar, zip) -&amp;gt; Produce installer’s -&amp;gt; Create (or) update Database schema (or) data
In DevOps, tests are designed and automated even before the code is written.</description>
    </item>
    
    <item>
      <title>Recap</title>
      <link>https://aws-hugo.web.app/50_conclusion/1_recap.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/50_conclusion/1_recap.html</guid>
      <description>Congratulations Well Done! With your help we have successfully demonstrated to Mythical Mysfits team, how to orchestrate their Testing in DevOps and enable earlier defect detection and higher-quality deployments.
You have successfully completed the “Test Automation in DevOps” workshop, embracing quality assurance across the lifecycle.
We have accomplished In this workshop, we have built, fixed and executed the Continuous Testing pipeline. Along with this hands-on implementation, you now also have a high-level understanding on testing in DevOps, including various testing stages, their objectives, challenges, enablers and some industry best practices.</description>
    </item>
    
    <item>
      <title>Build &amp; Execute</title>
      <link>https://aws-hugo.web.app/30_pre_build_quality_assurance/2_build_execute.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/30_pre_build_quality_assurance/2_build_execute.html</guid>
      <description>PIPELINE CREATION AND EXECUTION To deploy the pipeline, run the following commands in Cloud9’s terminal:
aws cloudformation create-stack --stack-name PreBuildQA --template-url https://aws-wrkshp-artifacts.s3-eu-west-1.amazonaws.com/awsworkshop_infrastructure_artefacts/awsworkshop_prebuild_qa.json --capabilities CAPABILITY_NAMED_IAM Go to the CloudFormation console and check the status of your pipeline stack creation, named &amp;lsquo;PreBuildQA&amp;rsquo;. It should state - “CREATE_IN_PROGRESS”.
INFO: This step takes approximately ~1minute and if successful, you can see the status of STACK - ‘PreBuildQA’ as “CREATE_COMPLETE”, as shown in the screenshot below: Please click on your stack name.</description>
    </item>
    
    <item>
      <title>Build &amp; Execute</title>
      <link>https://aws-hugo.web.app/45_build_deploy_assurance/2_build_execute.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/45_build_deploy_assurance/2_build_execute.html</guid>
      <description>PIPELINE CREATION AND EXECUTION To deploy the pipeline, run the following commands in Cloud9’s terminal:
aws cloudformation create-stack --stack-name PostBuildQA --template-url https://aws-wrkshp-artifacts.s3-eu-west-1.amazonaws.com/awsworkshop_infrastructure_artefacts/awsworkshop_postbuild_qa.json --capabilities CAPABILITY_NAMED_IAM Go to the CloudFormation console and check the status of your pipeline stack creation named &amp;lsquo;PostBuildQA&amp;rsquo;. It should state - “CREATE_IN_PROGRESS”.
INFO: This step takes approximately 1 minute and if successful, you can see the status of STACK - ‘PostBuildQA’ as “CREATE_COMPLETE”, as shown in the screenshot below:</description>
    </item>
    
    <item>
      <title>Build &amp; Execute</title>
      <link>https://aws-hugo.web.app/46_functional_assurance/2_build_execute.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/46_functional_assurance/2_build_execute.html</guid>
      <description>PIPELINE CREATION AND EXECUTION Please complete the Module 2: Post-Build QA before commencing with this module. This will ensure you have deployed the build on the server successfully before executing the Functional test suits during this module.
 Execute the cloud formation template from Cloud9 to automatically create the Functional Assurance pipeline.
aws cloudformation create-stack --stack-name FunctionalAssurance --template-url https://aws-wrkshp-artifacts.s3-eu-west-1.amazonaws.com/awsworkshop_infrastructure_artefacts/awsworkshop_functional_assurance.json --capabilities CAPABILITY_NAMED_IAM Go to the CloudFormation console and check the status of your pipeline stack creation named &amp;lsquo;FunctionalAssurance&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Build &amp; Execute</title>
      <link>https://aws-hugo.web.app/47_experience_assurance/2_build_execute.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/47_experience_assurance/2_build_execute.html</guid>
      <description>PIPELINE CREATION AND EXECUTION Please complete the Module 2: Post-Build QA before commencing with this module. This will ensure you have deployed the build on the server successfully before executing the Experience test suits during this module.
 Execute the cloud formation template from Cloud9 to automatically create the Experience Assurance pipeline.
aws cloudformation create-stack --stack-name ExperienceAssurance --template-url https://aws-wrkshp-artifacts.s3-eu-west-1.amazonaws.com/awsworkshop_infrastructure_artefacts/awsworkshop_experience_assurance.json --capabilities CAPABILITY_NAMED_IAM Go to the CloudFormation console and check the status of your pipeline stack creation named ‘ExperienceAssurance’.</description>
    </item>
    
    <item>
      <title>Build &amp; Execute</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/2_build_execute.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/2_build_execute.html</guid>
      <description>PIPELINE CREATION AND EXECUTION To deploy the pipeline, run the following commands in Cloud9’s terminal
aws cloudformation create-stack --stack-name E2EAssurance --template-url https://aws-wrkshp-artifacts.s3-eu-west-1.amazonaws.com/awsworkshop_infrastructure_artefacts/awsworkshop_e2e_assurance.json --capabilities CAPABILITY_NAMED_IAM Go to the CloudFormation console and check the status of your pipeline stack creation named &amp;lsquo;E2EAssurance&amp;rsquo;. It should state - “CREATE_IN_PROGRESS”INFO – This step takes approximately 1 minute and if successful, you can see the status of STACK - ‘E2EAssurance’ as “CREATE_COMPLETE”as shown in the screenshot below:</description>
    </item>
    
    <item>
      <title>Register with Cognizant</title>
      <link>https://aws-hugo.web.app/10_prerequisites/2_create_a_cognizant_account_to_access_workshop_content.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/10_prerequisites/2_create_a_cognizant_account_to_access_workshop_content.html</guid>
      <description>In addition to the workshop itself, we are pleased to offer you several thought leadership and research pieces about testing from a few experienced testing experts at Cognizant. We ask that you kindly register yourself at: https://www.cognizant.com/application-modernization
 Steps for Registration  Click on the Link Provide following input in the given form:   First and Last Name Update Company Update Email ID Update Industry Update Job Title  Click on Register Button  Estimated time required to complete registration: 2 minutes.</description>
    </item>
    
    <item>
      <title>Debug &amp; Fix</title>
      <link>https://aws-hugo.web.app/30_pre_build_quality_assurance/3_debug_fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/30_pre_build_quality_assurance/3_debug_fix.html</guid>
      <description>DEBUGGING AND RE-EXECUTION To debug the issue, from the AWSCodeBuild you can go to CodeBuild section &amp;ndash;&amp;gt; Report History and click on the latest failed link under Test Reports History.
You can then view the below report. Click on the failed test case to see the reason for failure.
Alternatively, please switch to your Reporting Dashboard and go to the section UnitTest to view the summary of this stage. Click on the component to view detailed test report to spot where the test failed.</description>
    </item>
    
    <item>
      <title>Debug &amp; Fix</title>
      <link>https://aws-hugo.web.app/46_functional_assurance/3_debug_fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/46_functional_assurance/3_debug_fix.html</guid>
      <description>DEBUGGING AND RE-EXECUTION Access the reporting dashboard page, refresh to see the failure status and the error message: icon on AWS console to be used to check the error message below:&amp;lt; org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {&amp;quot;method&amp;quot;:&amp;quot;css selector&amp;quot;,&amp;quot;selector&amp;quot;:&amp;quot;#productsearch&amp;quot;} &amp;gt;
Such errors indicate that the automation script is unable to locate the object on the screen as properties of that UI object have seemingly changed since the last build.</description>
    </item>
    
    <item>
      <title>Debug &amp; Fix</title>
      <link>https://aws-hugo.web.app/47_experience_assurance/3_debug_fix.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/47_experience_assurance/3_debug_fix.html</guid>
      <description>DEBUGGING AND RE-EXECUTION Security test build has failed because the X-Frame-Options was not set in the response headers and this was detected by the ZAP Proxy. This rule is set as “FAIL” in the gen.conf file for ZAP tool.
To verify this, go to “Report Dashboard” &amp;ndash;&amp;gt; Go “Experience Assurance” section and Click on the “Rule Report” link under the “Security Test” section. (This will open the security_test_output.txt in browser).</description>
    </item>
    
    <item>
      <title>Next Step</title>
      <link>https://aws-hugo.web.app/50_conclusion/3_next_step.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/50_conclusion/3_next_step.html</guid>
      <description>Now that you have built your own Testing Pipeline, there are multiple ways in which you can explore the infinite possibilities in Testing that the DevOps world offers.
 Integrate your pipeline with Slack channel to trigger and monitor the execution from Slack interface rather than Cloud9 (or) AWS console Replace (or) append the tooling stack by creating your own automation test with new tools and frameworks Implement Code progression in the pipelines to demonstrate how code base moves form Dev to Production based on the quality gates at every stage Execute your mobile testing on AWS Device Farm Add additional testing types such as integration testing and UAT before releasing the code to production Integrate AI based BOTS for intelligent test execution based on the code committed and possible business impact.</description>
    </item>
    
    <item>
      <title>Report &amp; Analysis</title>
      <link>https://aws-hugo.web.app/45_build_deploy_assurance/3_test_reports_analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/45_build_deploy_assurance/3_test_reports_analysis.html</guid>
      <description>TEST REPORT ANALYSIS You can now refresh the reporting dashboard and review the smoke test results for this stage.
Refer the screenshot as shown below for details:
User should be able to see the test summary of the recently executed CodeBuild Project for Smoke Testing. For the detailed report, navigate to detailed report for the corresponding testing type.
Refer the screenshot as shown below for details:
icon to be clicked on the right side of each test step, for the corresponding image captured during smoke test execution.</description>
    </item>
    
    <item>
      <title>Report &amp; Analysis</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/3_test_reports_analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/3_test_reports_analysis.html</guid>
      <description>TEST REPORTS ANALYSIS Reporting dashboard showcases a consolidated view of the statistics applicable for all the types of tests performed as the part of E2E Assurance.
To access the dashboard, replace the value of key ‘AppServer_PublicIP‘ which you have noted in output section, of the Getting Started section in the below URL:
Dashboard URL is - http://&amp;lt;AppServer_PublicIP&amp;gt;:3337/report
Click on the relevant section of the dashboard to view the details of the individual modules covered:</description>
    </item>
    
    <item>
      <title>Final Thoughts </title>
      <link>https://aws-hugo.web.app/50_conclusion/4_final_thoughts.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/50_conclusion/4_final_thoughts.html</guid>
      <description>Given the nature of this workshop, we have demonstrated just a snapshot of the test execution stage and not the overall testing lifecycle. The test strategy and approach for any system landscape depends on the technology stack, development methodology, tools &amp;amp; framework selections but most importantly testing is driven by the associated business risks and expected customer experience.
We recommend you browse through the Cognizant portal for Thought Leadership content especially around whitepapers and blogs written by industry experts and Cognizant automation consultants.</description>
    </item>
    
    <item>
      <title>Report &amp; Analysis</title>
      <link>https://aws-hugo.web.app/30_pre_build_quality_assurance/4_test_reports_analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/30_pre_build_quality_assurance/4_test_reports_analysis.html</guid>
      <description>TEST REPORTS ANALYSIS To view the CodeQuality and test coverage reports, use SONARQube dashboard for code quality metrics.
Refer the screenshot as shown below for more details:
To view the details of unit test, use the reporting dashboard for all statistics.
Refer the screenshot as shown below for more details:</description>
    </item>
    
    <item>
      <title>Report &amp; Analysis</title>
      <link>https://aws-hugo.web.app/46_functional_assurance/4_test_reports_analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/46_functional_assurance/4_test_reports_analysis.html</guid>
      <description>TEST REPORT ANALYSIS You can find in the S3 buckets, the output artifacts i.e. reports and other files, as follows:
Note - You can get the name of the S3 Bucket from Secret Manager – ‘Reports’ noted under section ‘Getting Started.’
You can now refresh the reporting dashboard and review the test results for this pipeline. Refer the screenshot as shown below:
See test summary of the recently executed Functional Assurance pipeline.</description>
    </item>
    
    <item>
      <title>Report &amp; Analysis</title>
      <link>https://aws-hugo.web.app/47_experience_assurance/4_test_reports_analysis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/47_experience_assurance/4_test_reports_analysis.html</guid>
      <description>TEST REPORT ANALYSIS Go to the S3 bucket created as part of this demo in the previous modules. Reports and other files can be found in the s3 bucket inside the respective folders, for further analysis and understanding
You can now refresh the reporting dashboard and review the test results. Refer the dashboard screenshot as shown below:
Additionally, Practitioners can access Cognizant Thought Leadership on Customer Experience, by referring the blog by our Market Expert titled - “From &amp;lsquo;Ensuring Customer Experience’ to &amp;lsquo;Assuring Trust’: Rethinking the Role of QA”.</description>
    </item>
    
    <item>
      <title>The Accelerator</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/4_ai_driven_qa.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/4_ai_driven_qa.html</guid>
      <description>AI Driven QA An artificial intelligence (AI) driven QA leverages machine learning (ML) and Natural language processing (NLP) algorithms and techniques to build meaningful insights into the product quality. The AI induces this much needed intelligence into the continuous testing pipelines by forecasting possible defects, impacts, gaps, failures and test coverage and help the DevOps teams take informed decisions on run time. No wonder thus that AI is rapidly proving to be the modern day accelerator for testing in DevOps that significantly optimizes the overall testing effort and cycle time.</description>
    </item>
    
    <item>
      <title>The Enablers </title>
      <link>https://aws-hugo.web.app/45_build_deploy_assurance/4_the_enablers.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/45_build_deploy_assurance/4_the_enablers.html</guid>
      <description>In addition to the practices we discussed so far, Service Virtualization (SV) and Test Data Management (TDM) are two enablers that are most critical to the successful implementation of QA in DevOps, since they both result in laying a strong foundation for testing in general and automation in specific. As this workshop focuses on the execution stage, let us discuss their basic concepts and high-level approach.
Service Virtualization Unavailability of environment needed for testing, is the one of the key bottleneck for Continuous Testing in DevOps.</description>
    </item>
    
    <item>
      <title>Tikk Talk</title>
      <link>https://aws-hugo.web.app/30_pre_build_quality_assurance/5_tikk_talk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/30_pre_build_quality_assurance/5_tikk_talk.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tikk Talk</title>
      <link>https://aws-hugo.web.app/45_build_deploy_assurance/5_tikk_talk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/45_build_deploy_assurance/5_tikk_talk.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tikk Talk</title>
      <link>https://aws-hugo.web.app/46_functional_assurance/5_tikk_talk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/46_functional_assurance/5_tikk_talk.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tikk Talk</title>
      <link>https://aws-hugo.web.app/47_experience_assurance/5_tikk_talk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/47_experience_assurance/5_tikk_talk.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tikk Talk</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/5_tikk_talk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/5_tikk_talk.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>DevOps puts Testing at the Core</title>
      <link>https://aws-hugo.web.app/05_introduction/10_devops_puts_testing_at_the_core.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/05_introduction/10_devops_puts_testing_at_the_core.html</guid>
      <description>Previously, there was a popular misconception about DevOps, that bringing development and operations teams together would result in greater efficiency, eliminating the very need for testing. However, it was quickly realized that this was not the case. On the contrary, DevOps transformed the role of testing from that of a gatekeeper to a guardian of quality across the lifecycle. This transition eliminates testing silos and instead embeds it in each stage of the DevOps process to deliver much needed quality at speed.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://aws-hugo.web.app/30_pre_build_quality_assurance/10_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/30_pre_build_quality_assurance/10_summary.html</guid>
      <description>The cost of fixing an error grows exponentially as it proceeds undetected through the SDLC. Pre-build QA helps in detecting issues early on and preventing the costs of software errors. Especially from a DevOps perspective, it paves way for early testing, bringing in the required agility in the QA cycles and speeding up the time to market.
Well done! You have successfully fixed the error and executed Pre-Build Quality Assurance Pipeline.</description>
    </item>
    
    <item>
      <title>The Premise</title>
      <link>https://aws-hugo.web.app/20_getting-started/10_permises.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/20_getting-started/10_permises.html</guid>
      <description>Mythical Mysfits (MM) is an e-commerce giant offering online shopping across a wide array of products. It services global customers via an omni-channel portal.
Problem Statement - MM intends to speed up their time to market with frequent releases to production.They have implemented a development pipeline, however their testing still follows a traditional waterfall approach, leading to issues such as:
 Increasing efforts spent on testing and re-testing the code changes Defects detected late in testing, costing significant effort, time and resources Siloed automation due to a hybrid tooling landscape Prolonged testing cycles impacting the overall speed of delivery to production Too many production incidents Poor user feedbacks  The Assignment - MM has commissioned Cognizant Consultants to help them modernize their testing practices.</description>
    </item>
    
    <item>
      <title>Key Tenets of Testing in DevOps</title>
      <link>https://aws-hugo.web.app/05_introduction/20_key_tenets_of_testing_in_devops.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/05_introduction/20_key_tenets_of_testing_in_devops.html</guid>
      <description>Testing in DevOps is fundamentally different from traditional legacy testing approaches. For a DevOps program to succeed, testing needs to be:
 Collaborative: Dev, Test and Ops works together as one team to ensure a robust application is built correctly the first time, with quality becoming a shared responsibility across the organization. Automation drives QA and expects enhanced skills and mindset change. Continuous: Testing is executed automatically and continuously throughout the DevOps lifecycle.</description>
    </item>
    
    <item>
      <title>In-store for Practitioners</title>
      <link>https://aws-hugo.web.app/05_introduction/30_whats_in_store_for_practitioners.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/05_introduction/30_whats_in_store_for_practitioners.html</guid>
      <description>To introduce you to the world of testing in DevOps, we have planned hands-on exercises and induced real time problems, that we will de-bug and fix together in this workshop.
 Why QA is integral to a successful DevOps implementation How testing in DevOps is different than traditional testing What types and stages of testing are essential for end-to-end quality assurance How to build and execute the continuous testing pipeline What are the various tooling alternatives, enablers and best practices in testing for DevOps How to integrate open source tool-based automation suites in the pipeline How to debug typical issues and fix your continuous testing pipeline  Let us get the jargons out of the way in Software Testing We would like to throw some light on a few common jargons in Software Testing that have been extensively used in this workshop.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://aws-hugo.web.app/45_build_deploy_assurance/30_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/45_build_deploy_assurance/30_summary.html</guid>
      <description>As discussed in this module, Post-Build Quality Assurance includes a round of detailed build hardening and build verification testing, before the build is deployed. The build deployment is followed by a quick round Configuration and Smoke testing, to get a rapid feedback on the readiness of that build, for elaborate testing cycles in terms of its availability and accessibility. The idea is to raise quick alarms with the development (or) environment teams in case of any showstoppers for testing (or) to give a green signal to QA teams to proceed with subsequent test executions.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://aws-hugo.web.app/46_functional_assurance/30_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/46_functional_assurance/30_summary.html</guid>
      <description>Testing in DevOps essentially means testing early and testing often. Thus, it is implicit that functional automation must go beyond the traditional UI based tests, to leverage other architectural components such as data and services. This speeds up test execution and helps with shift left as now you can validate these components as soon as they are developed, rather than waiting for the Development team to deliver a working UI.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://aws-hugo.web.app/47_experience_assurance/30_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/47_experience_assurance/30_summary.html</guid>
      <description>In DevOps, it is crucial to shift non-functional testing to left to provide faster feedbacks on potential performance bottlenecks, security vulnerabilities and accessibility issues. The pipeline moves through different stages of testing and generates reports on non-functional defects, addresses test incidents and confirms the overall state of experience delivered by the application.
For this workshop, we have only considered selective non-functional checks. However, in practice, assuring experience consists of a large gamut of non-functional tests and practices.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://aws-hugo.web.app/48_end_to_end_testing_assurance/30_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/48_end_to_end_testing_assurance/30_summary.html</guid>
      <description>In this module, we have witnessed the end-to-end successful test execution for a happy path scenario. The idea is to demonstrate how the continuous pipelines will be executed in real time progressing the code through various quality gates and ensuring that the every aspect of a code change is tested and confirmed before it is certified for pre-production environments.
As discussed at the start, we have now seen how Testing in DevOps should be continuous in execution, collaborative by nature, cognitive with its decision-making and cloud ready in its architecture.</description>
    </item>
    
    <item>
      <title>The Structure</title>
      <link>https://aws-hugo.web.app/20_getting-started/30_workshop_structure_rules.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/20_getting-started/30_workshop_structure_rules.html</guid>
      <description>Scope: For this workshop, we will focus on the execution stage of the testing pipeline and not the complete testing life cycle.
  Modular Structure: This workshop constitutes of five modules that explain a continuous testing pipeline in a chronological sequence. Each module provides an overview, relevant concepts and practices, before getting into the pipeline execution. In order to get the best out this workshop, we recommend you to follow the sequence and build your pipeline in progression.</description>
    </item>
    
    <item>
      <title>The Environment</title>
      <link>https://aws-hugo.web.app/20_getting-started/40_getting_your_environment_ready.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-hugo.web.app/20_getting-started/40_getting_your_environment_ready.html</guid>
      <description>Creating Your Environment For this workshop, you will need to setup and configure your environment as below:
 Spin AWS Cloud9, leveraging CloudFormation to create source repositories and foundation infrastructure Run a few custom scripts.  This will build the required infrastructure and pre-configured pipelines required for this workshop so that you can focus on the learning without worrying about the peripherals.
Deploy &amp;amp; Launch AWS Cloud9 There are several ways you can provision AWS Cloud9, however, for this workshop, we will use AWS Management Console  to create our environment.</description>
    </item>
    
  </channel>
</rss>